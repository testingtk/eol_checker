name: EOL Check

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'
permissions:
  issues: write
  contents: read

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  eol-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Configure GitHub CLI
        run: |
          # Configure gh CLI to use the token
          gh auth setup-git
          echo "‚úÖ GitHub CLI configured"

      - name: Check for existing EOL issues
        id: check-issues
        run: |
          # Check if there are any open issues with the EOL label
          existing_issues=$(gh issue list --label eol --state open --json number,title --jq 'length')
          echo "existing_issues=$existing_issues" >> $GITHUB_OUTPUT
          
          # Get all open EOL issue numbers
          gh issue list --label eol --state open --json number --jq '.[].number' > open_issue_numbers.txt
          echo "Open EOL issues: $(cat open_issue_numbers.txt || echo 'None')"

      - name: Check EOL and create issue content
        run: |
          python -c "
          import sys, json
          sys.path.append('src')
          from eol_checker import EOLChecker
          from file_handlers import load_tools_from_json, save_results_html
          
          tools = load_tools_from_json('data/input/tools.json')
          results = EOLChecker().check_multiple_tools(tools)
          html_report = save_results_html(results)
          
          # Critical items (EOL or EOL within 30 days)
          critical_items = [r for r in results if r.get('criticality') == 'high']
          
          # Warning items (EOL within 90 days or unknown status)
          warning_items = [r for r in results if r.get('criticality') == 'medium']
          
          # Create issue content if there are critical or warning items
          if critical_items or warning_items:
              with open('eol_issue.md', 'w') as f:
                  f.write('## üö® EOL Tools Detected\\n\\n')
                  f.write(f'[üìä Download Full HTML Report](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})\\n\\n')
          
                  if critical_items:
                      f.write('### üî¥ Critical Priority\\n')
                      f.write('These tools are either EOL or will reach EOL within 30 days:\\n\\n')
                      for tool in critical_items:
                          if tool['eol_status'] == 'EOL':
                              status = 'üî¥ EOL'
                          else:
                              days = tool.get('days_until_eol', 'N/A')
                              status = f'‚ö†Ô∏è EOL in {days} days'
                          f.write(f'- **{tool[\"tool_name\"]} {tool[\"current_version\"]}** - {status} (EOL: {tool[\"eol_date\"]}, Latest: {tool.get(\"latest_version\", \"Unknown\")})\\n')
                      f.write('\\n')
          
                  if warning_items:
                      f.write('### üü° Warning Priority\\n')
                      f.write('These tools have warnings or will reach EOL within 90 days:\\n\\n')
                      for tool in warning_items:
                          if tool['eol_status'] == 'EOL':
                              status = 'üî¥ EOL'
                          elif tool['eol_status'] == 'Supported':
                              days = tool.get('days_until_eol', 'N/A')
                              if days != 'N/A':
                                  status = f'üü° EOL in {days} days'
                              else:
                                  status = 'üü° Supported (no EOL date)'
                          else:
                              status = 'üü° Unknown status'
                          f.write(f'- **{tool[\"tool_name\"]} {tool[\"current_version\"]}** - {status} (EOL: {tool[\"eol_date\"]}, Latest: {tool.get(\"latest_version\", \"Unknown\")})\\n')
                      f.write('\\n')
          
                  f.write('### üìä Summary\\n')
                  f.write(f'- Total tools checked: {len(results)}\\n')
                  f.write(f'- üî¥ Critical items: {len(critical_items)}\\n')
                  f.write(f'- üü° Warning items: {len(warning_items)}\\n')
                  f.write(f'- ‚úÖ Supported items: {len([r for r in results if r[\"eol_status\"] == \"Supported\" and r.get(\"criticality\") == \"low\"])}\\n')
          
                  f.write('\\n### üí° Recommendations\\n')
                  f.write('1. Prioritize updating critical items immediately\\n')
                  f.write('2. Plan updates for warning items in the near future\\n')
                  f.write('3. Review the full HTML report for complete details\\n')
          
          # Create a flag file if we should create an issue
          if critical_items or warning_items:
              with open('should_create_issue', 'w') as f:
                  f.write('true')
          else:
              with open('close_issue.md', 'w') as f:
                  f.write('‚úÖ All tools are supported! No critical or warning EOL tools detected. Closing this issue.\\n')
                  f.write(f'Total tools checked: {len(results)}\\n')
          "

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: eol-html-report
          path: data/output/reports/eol_report.html

      - name: Compare with all existing open issues
        id: compare-issues
        if: hashFiles('should_create_issue') != '' && steps.check-issues.outputs.existing_issues != '0'
        run: |
          # Get the current issue content
          current_issue_content=$(cat eol_issue.md)
          current_hash=$(echo "$current_issue_content" | sha256sum | cut -d' ' -f1)
          echo "Current issue hash: $current_hash"
          
          # Initialize variables
          duplicate_found=false
          similar_issue_number=""
          
          # Read all open issue numbers
          while read issue_number; do
            if [ -n "$issue_number" ]; then
              echo "Checking issue #$issue_number..."
          
              # Get issue content
              issue_content=$(gh issue view $issue_number --json body --jq '.body')
              issue_hash=$(echo "$issue_content" | sha256sum | cut -d' ' -f1)
          
              echo "Issue #$issue_number hash: $issue_hash"
          
              # Compare hashes
              if [ "$current_hash" = "$issue_hash" ]; then
                echo "Duplicate found in issue #$issue_number"
                duplicate_found=true
                similar_issue_number=$issue_number
                break
              fi
          
              # Also check if the issue has similar content (same critical/warning items)
              current_critical_count=$(grep -c "Critical items:" eol_issue.md || true)
              current_warning_count=$(grep -c "Warning items:" eol_issue.md || true)
          
              issue_critical_count=$(echo "$issue_content" | grep -c "Critical items:" || true)
              issue_warning_count=$(echo "$issue_content" | grep -c "Warning items:" || true)
          
              if [ "$current_critical_count" = "$issue_critical_count" ] && [ "$current_warning_count" = "$issue_warning_count" ]; then
                echo "Similar issue found #$issue_number with same item counts"
                # Check if the actual tool lists are similar
                current_tools=$(grep -oE "\*\*[^*]+\*\*" eol_issue.md | sort)
                issue_tools=$(echo "$issue_content" | grep -oE "\*\*[^*]+\*\*" | sort)
          
                if [ "$current_tools" = "$issue_tools" ]; then
                  echo "Exact same tools found in issue #$issue_number"
                  duplicate_found=true
                  similar_issue_number=$issue_number
                  break
                fi
              fi
            fi
          done < open_issue_numbers.txt
          
          echo "duplicate_found=$duplicate_found" >> $GITHUB_OUTPUT
          echo "similar_issue_number=$similar_issue_number" >> $GITHUB_OUTPUT
          
          if [ "$duplicate_found" = "true" ]; then
            echo "Duplicate issue found, skipping creation"
            rm should_create_issue
          else
            echo "No duplicates found, proceeding with issue creation"
          fi

      - name: Create issue for critical/warning EOL tools
        if: hashFiles('should_create_issue') != '' && (steps.check-issues.outputs.existing_issues == '0' || steps.compare-issues.outputs.duplicate_found == 'false')
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "EOL Tools Detected - Critical and Warning Items"
          content-filepath: eol_issue.md
          labels: eol,dependencies,security

      - name: Update existing similar issue
        if: hashFiles('should_create_issue') != '' && steps.compare-issues.outputs.duplicate_found == 'true'
        run: |
          # Add a comment to the existing issue with updated information
          similar_issue_number=${{ steps.compare-issues.outputs.similar_issue_number }}
          echo "Updating existing issue #$similar_issue_number with new check timestamp"
          
          # Add a comment with the new run information
          gh issue comment $similar_issue_number --body "‚úÖ EOL status re-checked on $(date -u +'%Y-%m-%d %H:%M:%S UTC'). Status remains unchanged. [View latest run](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)"

      - name: Close existing EOL issues if all clear
        if: hashFiles('close_issue.md') != '' && steps.check-issues.outputs.existing_issues != '0'
        run: |
          # Close any existing EOL issues since everything is now supported
          while read issue_number; do
            if [ -n "$issue_number" ]; then
              echo "Closing issue #$issue_number"
              gh issue close $issue_number --comment "All tools are now supported! No critical or warning EOL tools detected. Closing this issue."
            fi
          done < open_issue_numbers.txt

      - name: Skip issue creation (duplicate found)
        if: hashFiles('should_create_issue') != '' && steps.compare-issues.outputs.duplicate_found == 'true'
        run: |
          echo "Duplicate issue already exists (#${{ steps.compare-issues.outputs.similar_issue_number }}), skipping creation"

      - name: Clean up if no action needed
        if: hashFiles('should_create_issue') == '' && hashFiles('close_issue.md') == ''
        run: |
          echo "No EOL issues detected and no existing issues to close"