name: EOL Check

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'

permissions:
  issues: write
  contents: read
  pull-requests: read

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  eol-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate EOL report
        run: |
          python run.py --input data/input/tools.json --output-dir data/output/reports

      - name: Upload HTML Report artifact
        uses: actions/upload-artifact@v4
        with:
          name: eol-html-report
          path: data/output/reports/*.html
          retention-days: 7

      - name: Install GitHub CLI
        run: |
          type -p gh >/dev/null || sudo apt update && sudo apt install -y gh

      - name: Create GitHub issues for critical and warning tools
        run: |
          # Read the latest JSON report
          LATEST_JSON=$(ls -t data/output/reports/*.json | head -n1)
          
          if [ -f "$LATEST_JSON" ]; then
            echo "Processing report: $LATEST_JSON"
          
            # Extract critical and warning tools from the JSON report
            CRITICAL_TOOLS=$(jq -r '.tools[] | select(.criticality == "high") | "\(.tool_name)|\(.current_version)|\(.eol_status)|\(.eol_date)|\(.latest_version)"' "$LATEST_JSON")
            WARNING_TOOLS=$(jq -r '.tools[] | select(.criticality == "medium") | "\(.tool_name)|\(.current_version)|\(.eol_status)|\(.eol_date)|\(.latest_version)"' "$LATEST_JSON")
          
            # Function to create issue if it doesn't exist
            create_issue_if_needed() {
              local tool_name="$1"
              local current_version="$2"
              local eol_status="$3"
              local eol_date="$4"
              local latest_version="$5"
              local criticality="$6"
          
              # Create a unique issue title
              local issue_title="EOL Alert: $tool_name $current_version - $eol_status"
          
              # Check if issue already exists
              existing_issue=$(gh issue list --search "in:title \"$issue_title\"" --json number --jq '.[].number' 2>/dev/null || echo "")
          
              if [ -z "$existing_issue" ]; then
                # Create markdown content for the issue
                local issue_body="## EOL Status Alert

  **Tool:** $tool_name
  **Current Version:** $current_version
  **Latest Version:** $latest_version
  **Status:** $eol_status
  **EOL Date:** $eol_date
  **Criticality:** $criticality
  **Report Generated:** $(date +"%Y-%m-%d %H:%M:%S")

### Recommended Actions:
- [ ] Upgrade to latest version ($latest_version)
- [ ] Review dependency compatibility
- [ ] Update documentation
- [ ] Test new version in staging environment

### Additional Context:
  This alert was automatically generated by the EOL Check workflow. Please address this issue promptly to maintain security and compatibility."

# Create the issue
echo "Creating issue for: $tool_name $current_version"
  gh issue create --title "$issue_title" --body "$issue_body" --label "eol-alert,$criticality" || echo "Failed to create issue for $tool_name"
  else
  echo "Issue already exists for $tool_name $current_version (Issue #$existing_issue)"
  fi
}

# Process critical tools
  echo "Processing critical tools..."
  while IFS='|' read -r tool_name current_version eol_status eol_date latest_version; do
  if [ -n "$tool_name" ]; then
  create_issue_if_needed "$tool_name" "$current_version" "$eol_status" "$eol_date" "$latest_version" "critical"
  fi
  done <<< "$CRITICAL_TOOLS"
  
  # Process warning tools
  echo "Processing warning tools..."
  while IFS='|' read -r tool_name current_version eol_status eol_date latest_version; do
  if [ -n "$tool_name" ]; then
  create_issue_if_needed "$tool_name" "$current_version" "$eol_status" "$eol_date" "$latest_version" "warning"
  fi
  done <<< "$WARNING_TOOLS"
  
  else
  echo "No JSON report found"
  exit 1
  fi
env:
  GH_TOKEN: ${{ github.token }}