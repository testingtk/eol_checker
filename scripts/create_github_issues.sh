#!/bin/bash

# Script to create GitHub issues for critical and warning EOL tools

set -e  # Exit on error

# Function to create labels if they don't exist
create_labels_if_needed() {
    local labels=("eol-alert" "critical" "warning")

    for label in "${labels[@]}"; do
        # Check if label exists
        if ! gh label list | grep -q "$label"; then
            echo "Creating label: $label"
            gh label create "$label" --color "FF0000" --description "EOL Alert" 2>/dev/null || true
        fi
    done
}

# Read the latest JSON report
LATEST_JSON=$(ls -t data/output/reports/*.json | head -n1)

if [ ! -f "$LATEST_JSON" ]; then
    echo "No JSON report found"
    exit 1
fi

echo "Processing report: $LATEST_JSON"

# Create labels first
echo "Ensuring GitHub labels exist..."
create_labels_if_needed

# Extract critical and warning tools from the JSON report
CRITICAL_TOOLS=$(jq -r '.tools[] | select(.criticality == "high") | "\(.tool_name)|\(.current_version)|\(.eol_status)|\(.eol_date)|\(.latest_version)"' "$LATEST_JSON")
WARNING_TOOLS=$(jq -r '.tools[] | select(.criticality == "medium") | "\(.tool_name)|\(.current_version)|\(.eol_status)|\(.eol_date)|\(.latest_version)"' "$LATEST_JSON")

# Function to create issue if it doesn't exist
create_issue_if_needed() {
    local tool_name="$1"
    local current_version="$2"
    local eol_status="$3"
    local eol_date="$4"
    local latest_version="$5"
    local criticality="$6"

    # Create a unique issue title
    local issue_title="EOL Alert: $tool_name $current_version - $eol_status"

    # Check if issue already exists
    existing_issue=$(gh issue list --search "in:title \"$issue_title\"" --json number --jq '.[].number' 2>/dev/null || echo "")

    if [ -z "$existing_issue" ]; then
        # Create markdown content for the issue
        local issue_body="## EOL Status Alert

**Tool:** $tool_name
**Current Version:** $current_version
**Latest Version:** $latest_version
**Status:** $eol_status
**EOL Date:** $eol_date
**Criticality:** $criticality
**Report Generated:** $(date +"%Y-%m-%d %H:%M:%S")

### Recommended Actions:
- [ ] Upgrade to latest version ($latest_version)
- [ ] Review dependency compatibility
- [ ] Update documentation
- [ ] Test new version in staging environment

### Additional Context:
This alert was automatically generated by the EOL Check workflow. Please address this issue promptly to maintain security and compatibility."

        # Create the issue without labels first, then add them separately
        echo "Creating issue for: $tool_name $current_version"

        # Create issue without labels to avoid errors
        issue_number=$(gh issue create --title "$issue_title" --body "$issue_body" --json number --jq '.number' 2>/dev/null || echo "")

        if [ -n "$issue_number" ]; then
            # Add labels separately
            gh issue edit "$issue_number" --add-label "eol-alert,$criticality" 2>/dev/null || echo "Warning: Could not add labels to issue #$issue_number"
            echo "Created issue #$issue_number for $tool_name $current_version"
        else
            echo "Failed to create issue for $tool_name"
        fi
    else
        echo "Issue already exists for $tool_name $current_version (Issue #$existing_issue)"
    fi
}

# Process critical tools
echo "Processing critical tools..."
while IFS='|' read -r tool_name current_version eol_status eol_date latest_version; do
    if [ -n "$tool_name" ]; then
        create_issue_if_needed "$tool_name" "$current_version" "$eol_status" "$eol_date" "$latest_version" "critical"
    fi
done <<< "$CRITICAL_TOOLS"

# Process warning tools
echo "Processing warning tools..."
while IFS='|' read -r tool_name current_version eol_status eol_date latest_version; do
    if [ -n "$tool_name" ]; then
        create_issue_if_needed "$tool_name" "$current_version" "$eol_status" "$eol_date" "$latest_version" "warning"
    fi
done <<< "$WARNING_TOOLS"

echo "GitHub issue creation completed"