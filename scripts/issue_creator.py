#!/usr/bin/env python3
import json
import os
import re
import subprocess
import sys
from datetime import datetime

def run_gh_command(args, capture_output=True):
    """Run GitHub CLI command with error handling"""
    try:
        result = subprocess.run(['gh'] + args, capture_output=capture_output, text=True, check=False)
        return result
    except FileNotFoundError:
        print("GitHub CLI (gh) not found")
        return None

def get_existing_issues():
    """Get list of existing EOL issues with details"""
    result = run_gh_command(['issue', 'list', '--search', 'in:title "EOL Alert:"', '--json', 'number,title,state,labels'])
    if result and result.returncode == 0:
        try:
            return json.loads(result.stdout)
        except json.JSONDecodeError:
            return []
    return []

def create_detailed_issue_body(tool_name, current_version, eol_status, eol_date, latest_version, criticality, days_until_eol, additional_info=None):
    """Create detailed issue body with comprehensive information"""
    # Build urgency section based on criticality
    if criticality == 'critical':
        urgency_section = """## 🚨 CRITICAL URGENCY

**IMMEDIATE ACTION REQUIRED** - This tool version has reached End-of-Life or will reach EOL within 30 days. Security vulnerabilities will not be patched."""

        timeline_info = "**IMMEDIATE** - EOL date has passed or is within 30 days"
        priority = "**Highest Priority** - Address immediately"

    elif criticality == 'warning':
        if days_until_eol != 'N/A' and isinstance(days_until_eol, int):
            timeline_info = f"**{days_until_eol} days until EOL** - {eol_date}"

            if days_until_eol <= 60:
                urgency_level = "HIGH PRIORITY"
            else:
                urgency_level = "MEDIUM PRIORITY"

            urgency_section = f"""## ⚠️ WARNING - {urgency_level}

**PLANNED ACTION REQUIRED** - This tool version will reach End-of-Life soon. Plan upgrade strategy."""

        else:
            timeline_info = f"**EOL Date:** {eol_date}"
            urgency_section = """## ⚠️ WARNING

**PLANNED ACTION REQUIRED** - This tool version has EOL concerns. Review upgrade options."""

        priority = "**Medium Priority** - Plan and schedule upgrade"

    else:
        urgency_section = """## ℹ️ INFORMATION

**MONITORING RECOMMENDED** - This tool version requires monitoring."""
        timeline_info = f"**EOL Date:** {eol_date}"
        priority = "**Low Priority** - Monitor and plan for future"

    # Build risk assessment
    if eol_status == 'EOL':
        risk_level = "**HIGH RISK** - Security vulnerabilities, no patches"
        impact = "**Critical Impact** - Potential security breaches, compliance issues"
    elif eol_status == 'Supported':
        risk_level = "**MEDIUM RISK** - Currently supported but approaching EOL"
        impact = "**Moderate Impact** - Planning required to avoid future risks"
    else:
        risk_level = "**UNKNOWN RISK** - EOL status unclear"
        impact = "**Unknown Impact** - Requires investigation"

    # Build recommended actions based on criticality
    if criticality == 'critical':
        actions = f"""### 🚀 Recommended Immediate Actions:

1. **IMMEDIATE UPGRADE** to latest version ({latest_version})
2. **EMERGENCY TESTING** of new version in staging
3. **IMMEDIATE DEPLOYMENT** to production
4. **SECURITY REVIEW** for potential vulnerabilities
5. **TEAM NOTIFICATION** of critical status"""

    elif criticality == 'warning':
        actions = f"""### 📅 Recommended Planned Actions:

1. **UPGRADE PLANNING** to latest version ({latest_version})
2. **TESTING SCHEDULE** within next 2 weeks
3. **DEPLOYMENT TIMELINE** before EOL date
4. **DEPENDENCY CHECK** for compatibility
5. **DOCUMENTATION UPDATE** for new version
6. **TEAM AWARENESS** of upcoming EOL"""

    else:
        actions = f"""### 📋 Recommended Monitoring Actions:

1. **VERSION TRACKING** of {tool_name} releases
2. **UPGRADE ROADMAP** planning
3. **QUARTERLY REVIEW** of EOL status
4. **DOCUMENTATION** of current version status"""

    # Additional context section
    context = f"""### 🔍 Additional Context:

- **Automated Detection:** This issue was automatically generated by EOL Check workflow
- **Frequency:** Scanned weekly for EOL status changes
- **Data Source:** endoflife.date API
- **Last Checked:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

    # Construct the full issue body
    issue_body = f"""{urgency_section}

### 📊 Tool Information:
**Tool:** {tool_name}
**Current Version:** {current_version}
**Latest Version:** {latest_version}
**Status:** {eol_status}
**EOL Date:** {eol_date}
**Days Until EOL:** {days_until_eol if days_until_eol != 'N/A' else 'Unknown'}
**Criticality:** {criticality.upper()}

### ⚠️ Risk Assessment:
**Risk Level:** {risk_level}
**Impact:** {impact}
**Timeline:** {timeline_info}
**Priority:** {priority}

{actions}

### 📝 Next Steps:
- [ ] Assign to appropriate team member
- [ ] Create upgrade plan
- [ ] Test new version
- [ ] Schedule deployment
- [ ] Update documentation
- [ ] Close issue after resolution

{context}"""

    if additional_info:
        issue_body += f"\n\n### 📋 Additional Information:\n{additional_info}"

    return issue_body

def create_github_issue(tool_name, current_version, eol_status, eol_date, latest_version, criticality, days_until_eol):
    """Create a GitHub issue for a tool with detailed information"""
    issue_title = f"EOL Alert: {tool_name} {current_version} - {eol_status}"

    # Check if issue already exists (open or closed)
    existing_issues = get_existing_issues()
    for issue in existing_issues:
        if issue_title == issue['title']:
            if issue['state'] == 'OPEN':
                print(f"Issue already exists for: {tool_name} {current_version} (#{issue['number']})")
                return True
            else:
                # Reopen closed issue if it becomes problematic again
                print(f"Reopening closed issue for: {tool_name} {current_version} (#{issue['number']})")
                run_gh_command(['issue', 'reopen', str(issue['number'])])
                return True

    # Create detailed issue body
    issue_body = create_detailed_issue_body(
        tool_name, current_version, eol_status, eol_date,
        latest_version, criticality, days_until_eol
    )

    # Create issue
    print(f"Creating issue for: {tool_name} {current_version}")

    # Use --body-file to avoid shell quoting issues
    temp_file = '/tmp/issue_body.md'
    with open(temp_file, 'w') as f:
        f.write(issue_body)

    result = run_gh_command([
        'issue', 'create',
        '--title', issue_title,
        '--body-file', temp_file,
        '--label', f'eol-alert,{criticality}'
    ])

    # Clean up
    if os.path.exists(temp_file):
        os.remove(temp_file)

    if result and result.returncode == 0:
        print(f"Successfully created issue for {tool_name}")
        return True
    else:
        print(f"Failed to create issue for {tool_name}")
        return False

def load_latest_report():
    """Load the latest JSON report"""
    reports_dir = 'data/output/reports'
    if not os.path.exists(reports_dir):
        print(f"Reports directory not found: {reports_dir}")
        return None

    json_files = [f for f in os.listdir(reports_dir) if f.endswith('.json')]
    if not json_files:
        print("No JSON reports found")
        return None

    # Get the most recent report
    latest_report = max(json_files, key=lambda f: os.path.getmtime(os.path.join(reports_dir, f)))
    report_path = os.path.join(reports_dir, latest_report)

    print(f"Processing report: {latest_report}")

    # Load the report
    try:
        with open(report_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading JSON report: {e}")
        return None

def main():
    """Main function for creating new issues"""
    # Load the report
    report_data = load_latest_report()
    if not report_data:
        return

    current_tools = report_data['tools']

    # Filter critical and warning tools
    critical_tools = [tool for tool in current_tools if tool.get('criticality') == 'high']
    warning_tools = [tool for tool in current_tools if tool.get('criticality') == 'medium']

    print(f"Found {len(critical_tools)} critical tools and {len(warning_tools)} warning tools")

    # Create issues for critical tools
    critical_created = 0
    for tool in critical_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'critical',
            tool.get('days_until_eol', 'N/A')
        ):
            critical_created += 1

    # Create issues for warning tools
    warning_created = 0
    for tool in warning_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'warning',
            tool.get('days_until_eol', 'N/A')
        ):
            warning_created += 1

    print(f"\nCreation Summary:")
    print(f"Critical issues created: {critical_created}/{len(critical_tools)}")
    print(f"Warning issues created: {warning_created}/{len(warning_tools)}")

if __name__ == "__main__":
    main()