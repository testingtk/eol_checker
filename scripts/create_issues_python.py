#!/usr/bin/env python3
import json
import os
import subprocess
import sys
from datetime import datetime

def run_gh_command(args, capture_output=True):
    """Run GitHub CLI command with error handling"""
    try:
        result = subprocess.run(['gh'] + args, capture_output=capture_output, text=True, check=False)
        return result
    except FileNotFoundError:
        print("GitHub CLI (gh) not found")
        return None

def get_existing_issues():
    """Get list of existing EOL issues with details"""
    result = run_gh_command(['issue', 'list', '--search', 'in:title "EOL Alert:"', '--json', 'number,title,state'])
    if result and result.returncode == 0:
        try:
            return json.loads(result.stdout)
        except json.JSONDecodeError:
            return []
    return []

def get_issue_details(issue_number):
    """Get detailed information about a specific issue"""
    result = run_gh_command(['issue', 'view', str(issue_number), '--json', 'title,body,state,labels'])
    if result and result.returncode == 0:
        try:
            return json.loads(result.stdout)
        except json.JSONDecodeError:
            return None
    return None

def close_issue(issue_number, tool_name, current_version, resolution):
    """Close an issue with a resolution comment"""
    comment = f"""âœ… **EOL Issue Resolved**

**Tool:** {tool_name}
**Version:** {current_version}
**Resolution:** {resolution}
**Resolved on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

This issue has been automatically closed because the EOL status has been resolved."""

    # Add resolution comment
    run_gh_command(['issue', 'comment', str(issue_number), '--body', comment])

    # Close the issue
    result = run_gh_command(['issue', 'close', str(issue_number)])

    if result and result.returncode == 0:
        print(f"Closed issue #{issue_number} for {tool_name} {current_version}")
        return True
    else:
        print(f"Failed to close issue #{issue_number} for {tool_name}")
        return False

def create_github_issue(tool_name, current_version, eol_status, eol_date, latest_version, criticality):
    """Create a GitHub issue for a tool"""
    issue_title = f"EOL Alert: {tool_name} {current_version} - {eol_status}"

    # Check if issue already exists
    existing_issues = get_existing_issues()
    for issue in existing_issues:
        if issue_title == issue['title'] and issue['state'] == 'OPEN':
            print(f"Issue already exists for: {tool_name} {current_version} (#{issue['number']})")
            return True

    # Create issue body
    issue_body = f"""## EOL Status Alert

**Tool:** {tool_name}
**Current Version:** {current_version}
**Latest Version:** {latest_version}
**Status:** {eol_status}
**EOL Date:** {eol_date}
**Criticality:** {criticality}
**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### Recommended Actions:
- [ ] Upgrade to latest version ({latest_version})
- [ ] Review dependency compatibility
- [ ] Update documentation
- [ ] Test new version in staging environment

### Additional Context:
This alert was automatically generated by the EOL Check workflow."""

    # Create issue
    print(f"Creating issue for: {tool_name} {current_version}")

    # Use --body-file to avoid shell quoting issues
    temp_file = '/tmp/issue_body.md'
    with open(temp_file, 'w') as f:
        f.write(issue_body)

    result = run_gh_command([
        'issue', 'create',
        '--title', issue_title,
        '--body-file', temp_file,
        '--label', f'eol-alert,{criticality}'
    ])

    # Clean up
    if os.path.exists(temp_file):
        os.remove(temp_file)

    if result and result.returncode == 0:
        print(f"Successfully created issue for {tool_name}")
        return True
    else:
        print(f"Failed to create issue for {tool_name}")
        return False

def check_and_close_resolved_issues(current_tools):
    """Check if previously reported issues are now resolved and close them"""
    existing_issues = get_existing_issues()
    closed_count = 0

    for issue in existing_issues:
        if issue['state'] == 'OPEN' and 'EOL Alert:' in issue['title']:
            # Extract tool info from issue title
            title_parts = issue['title'].split('EOL Alert: ')[1].split(' - ')
            if len(title_parts) >= 2:
                tool_info = title_parts[0].split()
                if len(tool_info) >= 2:
                    tool_name = ' '.join(tool_info[:-1])  # Get all parts except last (version)
                    tool_version = tool_info[-1]
                    old_status = title_parts[1]

                    # Check if this tool is in current report with better status
                    current_tool = next((t for t in current_tools
                                       if t['tool_name'] == tool_name
                                       and t['current_version'] == tool_version), None)

                    if current_tool:
                        # Conditions for considering the issue resolved:
                        # 1. Status changed from EOL to Supported
                        # 2. Criticality reduced from high to medium/low
                        # 3. Tool is no longer in critical/warning lists (upgraded)

                        resolution = None

                        if (old_status == 'EOL' and current_tool['eol_status'] == 'Supported'):
                            resolution = f"Upgraded from EOL to Supported status"

                        elif (old_status == 'EOL' and current_tool['eol_status'] == 'Unknown'):
                            resolution = f"Status changed from EOL to Unknown (may need manual verification)"

                        elif current_tool.get('criticality') in ['low', None]:
                            resolution = f"Criticality reduced to low - no longer requires immediate attention"

                        # Check if tool was upgraded to a non-problematic version
                        current_criticality = current_tool.get('criticality', 'medium')
                        if current_criticality not in ['high', 'medium']:
                            resolution = f"Version upgraded - no longer in critical/warning status"

                        if resolution:
                            if close_issue(issue['number'], tool_name, tool_version, resolution):
                                closed_count += 1

    return closed_count

def main():
    # Find the latest JSON report
    reports_dir = 'data/output/reports'
    if not os.path.exists(reports_dir):
        print(f"Reports directory not found: {reports_dir}")
        return

    json_files = [f for f in os.listdir(reports_dir) if f.endswith('.json')]
    if not json_files:
        print("No JSON reports found")
        return

    # Get the most recent report
    latest_report = max(json_files, key=lambda f: os.path.getmtime(os.path.join(reports_dir, f)))
    report_path = os.path.join(reports_dir, latest_report)

    print(f"Processing report: {latest_report}")

    # Load the report
    try:
        with open(report_path, 'r') as f:
            report_data = json.load(f)
    except Exception as e:
        print(f"Error loading JSON report: {e}")
        return

    current_tools = report_data['tools']

    # First, check and close resolved issues
    print("Checking for resolved issues to close...")
    closed_count = check_and_close_resolved_issues(current_tools)
    print(f"Closed {closed_count} resolved issues")

    # Filter critical and warning tools
    critical_tools = [tool for tool in current_tools if tool.get('criticality') == 'high']
    warning_tools = [tool for tool in current_tools if tool.get('criticality') == 'medium']

    print(f"Found {len(critical_tools)} critical tools and {len(warning_tools)} warning tools")

    # Create issues for critical tools
    critical_created = 0
    for tool in critical_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'critical'
        ):
            critical_created += 1

    # Create issues for warning tools
    warning_created = 0
    for tool in warning_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'warning'
        ):
            warning_created += 1

    print(f"\nSummary:")
    print(f"Closed resolved issues: {closed_count}")
    print(f"Critical issues created: {critical_created}/{len(critical_tools)}")
    print(f"Warning issues created: {warning_created}/{len(warning_tools)}")

if __name__ == "__main__":
    main()