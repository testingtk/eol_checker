#!/usr/bin/env python3
import json
import os
import subprocess
import sys
from datetime import datetime

def run_gh_command(args, capture_output=True):
    """Run GitHub CLI command with error handling"""
    try:
        result = subprocess.run(['gh'] + args, capture_output=capture_output, text=True, check=False)
        return result
    except FileNotFoundError:
        print("GitHub CLI (gh) not found")
        return None

def get_existing_issues():
    """Get list of existing EOL issue titles"""
    result = run_gh_command(['issue', 'list', '--search', 'in:title "EOL Alert:"', '--json', 'title'])
    if result and result.returncode == 0:
        try:
            issues = json.loads(result.stdout)
            return [issue['title'] for issue in issues]
        except json.JSONDecodeError:
            return []
    return []

def create_github_issue(tool_name, current_version, eol_status, eol_date, latest_version, criticality):
    """Create a GitHub issue for a tool"""
    issue_title = f"EOL Alert: {tool_name} {current_version} - {eol_status}"

    # Check if issue already exists
    existing_issues = get_existing_issues()
    if any(issue_title in issue for issue in existing_issues):
        print(f"Issue already exists for: {tool_name} {current_version}")
        return True

    # Create issue body
    issue_body = f"""## EOL Status Alert

**Tool:** {tool_name}
**Current Version:** {current_version}
**Latest Version:** {latest_version}
**Status:** {eol_status}
**EOL Date:** {eol_date}
**Criticality:** {criticality}
**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

### Recommended Actions:
- [ ] Upgrade to latest version ({latest_version})
- [ ] Review dependency compatibility
- [ ] Update documentation
- [ ] Test new version in staging environment

### Additional Context:
This alert was automatically generated by the EOL Check workflow."""

    # Create issue
    print(f"Creating issue for: {tool_name} {current_version}")

    # Use --body-file to avoid shell quoting issues
    with open('/tmp/issue_body.md', 'w') as f:
        f.write(issue_body)

    result = run_gh_command([
        'issue', 'create',
        '--title', issue_title,
        '--body-file', '/tmp/issue_body.md'
    ], capture_output=False)

    # Clean up
    if os.path.exists('/tmp/issue_body.md'):
        os.remove('/tmp/issue_body.md')

    if result and result.returncode == 0:
        print(f"Successfully created issue for {tool_name}")
        return True
    else:
        print(f"Failed to create issue for {tool_name}")
        return False

def main():
    # Find the latest JSON report
    reports_dir = 'data/output/reports'
    if not os.path.exists(reports_dir):
        print(f"Reports directory not found: {reports_dir}")
        return

    json_files = [f for f in os.listdir(reports_dir) if f.endswith('.json')]
    if not json_files:
        print("No JSON reports found")
        return

    # Get the most recent report
    latest_report = max(json_files, key=lambda f: os.path.getmtime(os.path.join(reports_dir, f)))
    report_path = os.path.join(reports_dir, latest_report)

    print(f"Processing report: {latest_report}")

    # Load the report
    try:
        with open(report_path, 'r') as f:
            report_data = json.load(f)
    except Exception as e:
        print(f"Error loading JSON report: {e}")
        return

    # Filter critical and warning tools
    critical_tools = [tool for tool in report_data['tools'] if tool.get('criticality') == 'high']
    warning_tools = [tool for tool in report_data['tools'] if tool.get('criticality') == 'medium']

    print(f"Found {len(critical_tools)} critical tools and {len(warning_tools)} warning tools")

    # Create issues for critical tools
    critical_created = 0
    for tool in critical_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'critical'
        ):
            critical_created += 1

    # Create issues for warning tools
    warning_created = 0
    for tool in warning_tools:
        if create_github_issue(
            tool['tool_name'],
            tool['current_version'],
            tool['eol_status'],
            tool['eol_date'],
            tool.get('latest_version', 'Unknown'),
            'warning'
        ):
            warning_created += 1

    print(f"\nSummary:")
    print(f"Critical issues created: {critical_created}/{len(critical_tools)}")
    print(f"Warning issues created: {warning_created}/{len(warning_tools)}")

if __name__ == "__main__":
    main()